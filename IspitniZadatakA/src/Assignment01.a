################################################################################
##*/**
##** @file AADSP2-Assignment01.a
##**
##** Module: AADSP2-Assignment01
##** Description:
##** $Source: $
##** $Revision: $
##** $Date: $ 4.12.2020.
##** $Author: $ Bojan Uljarevic RA-15/2017
##**
##**/
################################################################################
_AADSP2_Assignment01_a_

################################################################################
	.public X_S_Task01
	.public X_S_Task02
################################################################################

AADSP2_Assignment01_xdata .xdata_ovly .align(16)


X_BX_InputBuffer1		.dw	0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.10, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16

X_BX_InputBuffer2		.dw 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
						.dw -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1


AADSP2_Assignment01_ydata .ydata_ovly .align(32)

X_BY_OutputBuffer1		.bss (0x010)

X_BY_OutputBuffer2		.bsc (0x20), (0xff)

	#TODO: Place output buffer and output variables here
	
	#----------------------------------

AADSP2_Assignment01_code	.code_ovly


################################################################################
##*/**
##** Function: X_S_Task01
##**
##** @param
##**
##** @return
##**
##** Trashes:	a0, a1, a2, a3, b0, b1, b2, b3, x0, x1, x2, x3, y0, y1, y2, y3, i0, i1, i2, i3, i4, i5, i6, i7, nm0, nm1, nm2, nm3, nm4, nm5, nm6, nm7
##** Comment:
##**/
################################################################################
X_S_Task01
	
	i2 = (0x10)							# broj iteracija
	i0 = (X_BX_InputBuffer1)			# iterator kroz ulazni niz
	i1 = (X_BY_OutputBuffer1)			# iterator kroz izlazni niz
	
	do(i2),>Loop
		a0 = xmem[i0]					# tekuci element u a0
		a0 = a0 >> 1					# /2
		nop
		a0 = a0 >> 1					# /2 opet jer >> 2 ne moze...
		BitTst(i0), (0x01)				# da li je indeks tekuceg elementa paran?
		if(z==0) jmp >Assign			# ako je indeks paran preskacemo mnozenje sa -1
		a0 =~ a0						# komplement
		nop
%Assign:ymem[i1] = a0					# skladistenje u output buffer
		i0 += 1
%Loop:	i1 += 1							# inkrement indeksnih registara buffera


	#----------------------------------

#%X_S_Task01_End:
#-------------------------------------------------------------------------------
  ret
  
################################################################################
##*/**
##** Function: X_S_Task02
##**
##** @param
##**
##** @return
##**
##** Trashes:	a0, a1, a2, a3, b0, b1, b2, b3, x0, x1, x2, x3, y0, y1, y2, y3, i0, i1, i2, i3, i4, i5, i6, i7, nm0, nm1, nm2, nm3, nm4, nm5, nm6, nm7
##** Comment:
##**/
################################################################################
X_S_Task02
		
	i2 = (0x20)							# broj iteracija
	i0 = (X_BX_InputBuffer2)			# iterator kroz ulazni niz
	i1 = (X_BY_OutputBuffer2)			# iterator kroz izlazni niz
	
	uhalfword(a0) = (0x00)				# akumulator za kumulativnu sumu, inicijalizacija na 0
	uhalfword(x0) = (0x00)				# pomocna promjenjiva za akumulaciju
	
	do(i2),>Loop
		x0 = xmem[i0]					# tekuci element u x0
		a0 += x0; i0 += 1				# akumulacija sume i povecavanje ulaznog indeksa
%Loop:	ymem[i1] = a0; i1 += 1			# skladistenje u izlazni buffer i povecanje izlaznog indeksa
	

	#----------------------------------

#%X_S_Task02_End:
#-------------------------------------------------------------------------------
	ret
  
